{
  "address": "0xB070957A5Dde3967c0dCD70A89470370A39E7e67",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usdt",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimsLeft",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextUnlockDate",
          "type": "uint256"
        }
      ],
      "name": "TokenClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenPurchased",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLAIM_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCK_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUM_CLAIMS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUND_FUND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableTreasury",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkIfActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "icoTokenHolders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "issueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalTokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensToIssue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingForClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextUnlockDate",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "numUnlocks",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "isLocked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "initialPayout",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasBought",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reciever",
          "type": "address"
        }
      ],
      "name": "withdrawRemainingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7ae699b7a640b6a9420cc6adf6ae3a74ab09ab6a3e0e4764713eb5c1d14bd0e6",
  "receipt": {
    "to": null,
    "from": "0xffEe27Bc7f773ffbCB88621009a7c55ce8B73260",
    "contractAddress": "0xB070957A5Dde3967c0dCD70A89470370A39E7e67",
    "transactionIndex": 4,
    "gasUsed": "986981",
    "logsBloom": "0x
    "blockHash": "0x40f0a8c7e6d996fdff0d3286bb9723ae05ecc9238ddb5b2ef39a815a1fab4d09",
    "transactionHash": "0x7ae699b7a640b6a9420cc6adf6ae3a74ab09ab6a3e0e4764713eb5c1d14bd0e6",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 25689659,
        "transactionHash": "0x7ae699b7a640b6a9420cc6adf6ae3a74ab09ab6a3e0e4764713eb5c1d14bd0e6",
        "address": "0xB070957A5Dde3967c0dCD70A89470370A39E7e67",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ffee27bc7f773ffbcb88621009a7c55ce8b73260"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x40f0a8c7e6d996fdff0d3286bb9723ae05ecc9238ddb5b2ef39a815a1fab4d09"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 25689659,
        "transactionHash": "0x7ae699b7a640b6a9420cc6adf6ae3a74ab09ab6a3e0e4764713eb5c1d14bd0e6",
        "address": "0xCf3Bb6AC0f6D987a5727e2d15e39c2D6061D5beC",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000cf3bb6ac0f6d987a5727e2d15e39c2d6061d5bec",
          "0x000000000000000000000000b070957a5dde3967c0dcd70a89470370a39e7e67"
        ],
        "data": "0x000000000000000000000000000000000000000000108b2a2c28029094000000",
        "logIndex": 10,
        "blockHash": "0x40f0a8c7e6d996fdff0d3286bb9723ae05ecc9238ddb5b2ef39a815a1fab4d09"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 25689659,
        "transactionHash": "0x7ae699b7a640b6a9420cc6adf6ae3a74ab09ab6a3e0e4764713eb5c1d14bd0e6",
        "address": "0xCf3Bb6AC0f6D987a5727e2d15e39c2D6061D5beC",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9",
          "0x000000000000000000000000b070957a5dde3967c0dcd70a89470370a39e7e67",
          "0x000000000000000000000000b070957a5dde3967c0dcd70a89470370a39e7e67"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x40f0a8c7e6d996fdff0d3286bb9723ae05ecc9238ddb5b2ef39a815a1fab4d09"
      }
    ],
    "blockNumber": 25689659,
    "cumulativeGasUsed": "1166211",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf3Bb6AC0f6D987a5727e2d15e39c2D6061D5beC",
    "0x55d398326f99059fF775485246999027B3197955"
  ],
  "solcInputHash": "e654e7c1633bfbd357b15af51df5e318",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimsLeft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextUnlockDate\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_CLAIMS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_FUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkIfActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"icoTokenHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"issueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToIssue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingForClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextUnlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"numUnlocks\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"initialPayout\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasBought\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reciever\",\"type\":\"address\"}],\"name\":\"withdrawRemainingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vesting.sol\":\"RoundVesting\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//--------------------------\\n// 44 65 66 69 4d 6f 6f 6e\\n//--------------------------\\n//\\n//\\n// UI:\\n//\\n// - Is round active ==========================================> [bool]    isActive\\n// - Round end date ===========================================> [uint256] ROUND_END_DATE\\n// - Tokens left ==============================================> [uint256] availableTreasury\\n// - Return user liquid balance ===============================> [uint256] users[msg.sender].liquidBalance\\n// - Pending for claim for user ===============================> [uint256] users[msg.sender].pendingForClaim\\n// - Next unlock date for user ================================> [uint256] users[msg.sender].nextUnlockDate\\n// - Check allowance ==========================================> [uint256] USDT.allowance(msg.sender, address(this))\\n// - Buy tokens (recieve in USDT, input amount in Token) =======>           buyToken(uint256 _amount)\\n// - Check if user tokens unlocked and transfer them to user ==>           claimTokens()\\n// - Set allowance ============================================> call USDT contract from website directly\\n//                                                       approve amount = 200000000000000000000000000 wei\\n//                                                       this is WEI too much (\\ud83e\\udd21) but we'll never spend\\n//                                                       more than 50k, this allows us to track\\n//                                                       Token purchase amount limits\\n//\\n// DEPLOYMENT:\\n//\\n// - Deploy Token token\\n// - Deploy SeedRound, pass Token && USDT token addresses to constructor\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libs/@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../libs/@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/ITOKEN.sol\\\";\\n\\ncontract RoundVesting is Ownable {\\n\\n  // -------------------------------------------------------------------------------------------------------\\n  // ------------------------------- ROUND PARAMETERS\\n  // -------------------------------------------------------------------------------------------------------\\n\\n\\n  // @notice                            round conditions\\n  uint256 constant public               ROUND_FUND = 20_000_000 ether;             \\n  uint256 constant public               LOCK_PERIOD = 30 days;\\n  uint256 constant public               TGE = 277;                              // 2.77% TGE\\n  uint256 constant public               CLAIM_PERCENT = 270;                  // 2.7%\\n  uint8 constant public                 NUM_CLAIMS = 36;                      // 36 claims to be performed in total      \\n\\n  // @notice                            token interfaces\\n  address public                        TokenAddress;\\n  IToken                                TOKEN;\\n\\n  // @notice                            round state\\n  uint256 public                        availableTreasury = ROUND_FUND;\\n  bool    public                        isActive;\\n\\n\\n\\n\\n  // -------------------------------------------------------------------------------------------------------\\n  // ------------------------------- USER MANAGMENT\\n  // -------------------------------------------------------------------------------------------------------\\n\\n  // @notice                            user state structure\\n  struct                                User {\\n    uint256                             totalTokenBalance;  // total num of tokens user have bought through the contract\\n    uint256                             tokensToIssue;      // num of tokens user have bought in current vesting period (non complete unlock cycle)\\n    uint256                             liquidBalance;      // amount of tokens the contract already sent to user\\n    uint256                             pendingForClaim;    // amount of user's tokens that are still locked\\n    uint256                             nextUnlockDate;     // unix timestamp of next claim unlock (defined by LOCK_PERIOD)\\n    uint16                              numUnlocks;         // months total\\n    bool                                isLocked;           // are tokens currently locked\\n    uint256                             initialPayout;      // takes into account TGE % for multiple purchases\\n    bool                                hasBought;          // used in token purchase mechanics\\n  }\\n\\n  // @notice                            keeps track of users\\n  mapping(address => User) public       users;\\n  address[] public                      icoTokenHolders;\\n\\n\\n  // -------------------------------------------------------------------------------------------------------\\n  // ------------------------------- EVENTS\\n  // -------------------------------------------------------------------------------------------------------\\n\\n  event                                 TokenPurchased(address indexed user, uint256 amount);\\n  event                                 TokenClaimed(address indexed user,\\n                                                    uint256 amount,\\n                                                    uint256 claimsLeft,\\n                                                    uint256 nextUnlockDate);\\n\\n\\n  // FUNCTIONS\\n  //\\n  // -------------------------------------------------------------------------------------------------------\\n  // ------------------------------- Constructor\\n  // -------------------------------------------------------------------------------------------------------\\n\\n  // @param                             [address] token => token address\\n  // @param                             [address] usdt => USDT token address\\n  constructor(address token, address usdt) {\\n    TokenAddress = token;\\n    TOKEN = IToken(token);\\n    TOKEN.grantManagerToContractInit(address(this), ROUND_FUND);\\n    isActive = true;\\n  }\\n\\n\\n  // -------------------------------------------------------------------------------------------------------\\n  // ------------------------------- Modifiers\\n  // -------------------------------------------------------------------------------------------------------\\n\\n  // @notice                            checks if tokens could be sold\\n  // @param                             [uint256] amount => amount of tokens to sell\\n  modifier                              areTokensAvailable(uint256 amount) {\\n    require(availableTreasury - amount >= 0,\\n                      \\\"Not enough tokens left!\\\");\\n    _;\\n  }\\n\\n  // @notice                            checks whether user's tokens are locked\\n  modifier                              checkLock() {\\n    require(users[msg.sender].pendingForClaim > 0,\\n                                      \\\"Nothing to claim!\\\");\\n    require(block.timestamp >= users[msg.sender].nextUnlockDate,\\n                                      \\\"Tokens are still locked!\\\");\\n    users[msg.sender].isLocked = false;\\n    _;\\n  }\\n\\n  // @notice                            checks if round is active\\n  modifier                              ifActive() {\\n    if ( availableTreasury == 0) {\\n      isActive = false;\\n      revert(\\\"Round is not active!\\\");\\n    }\\n    isActive = true;\\n    _;\\n  }\\n\\n  // @notice                            checks if round is inactive\\n  modifier                              ifInactive() {\\n    if ( availableTreasury > 0) {\\n      isActive = true;\\n      revert(\\\"Round is still active!\\\");\\n    }\\n    isActive = false;\\n    _;\\n  }\\n\\n\\n\\n\\n  // -------------------------------------------------------------------------------------------------------\\n  // ------------------------------- ICO logic\\n  // -------------------------------------------------------------------------------------------------------\\n\\n  // @notice                            checks if tokens are unlocked and transfers set % from pendingForClaim\\n  //                                    user will recieve all remaining tokens with the last claim\\n  function                              claimTokens() public checkLock() {\\n    address                             user = msg.sender;\\n    User  storage                       userStruct = users[user];\\n    uint256                             amountToClaim;\\n\\n    require(userStruct.isLocked == false, \\\"Tokens are locked!\\\");\\n    if (userStruct.numUnlocks < NUM_CLAIMS - 1) {\\n      amountToClaim = (userStruct.tokensToIssue / 10_000) * CLAIM_PERCENT;\\n    }\\n    else if (userStruct.numUnlocks == NUM_CLAIMS - 1) {\\n      amountToClaim = userStruct.pendingForClaim;\\n    }\\n    else {\\n      revert(\\\"Everything is already claimed!\\\");\\n    }\\n    userStruct.isLocked = true;\\n    TOKEN.mint(user, amountToClaim);\\n    userStruct.liquidBalance += amountToClaim;\\n    userStruct.pendingForClaim -= amountToClaim;\\n    userStruct.nextUnlockDate += LOCK_PERIOD;\\n    userStruct.numUnlocks += 1;\\n\\n    emit TokenClaimed(user,\\n                     amountToClaim,\\n                     NUM_CLAIMS - userStruct.numUnlocks, // number of claims left to perform\\n                     userStruct.nextUnlockDate);\\n  }\\n\\n  // @notice                            when user buys Token, TGE % is issued immediately\\n  //                                    remaining tokens are locked for 12 * LOCK_PERIOD = 12 months + 2 months cliff\\n  // @param                             [uint256] amount => amount of Token tokens to distribute\\n  // @param                             [address] _to => address to issue tokens to\\n  function                              _lockAndDistribute(uint256 _amount, address _to) private {\\n    User  storage                       userStruct = users[_to];\\n    uint256                             timestampNow = block.timestamp;\\n\\n    uint256 immediateAmount = (_amount / 10_000) * TGE;\\n    TOKEN.mint(_to, immediateAmount);                                   // issue TGE % immediately\\n    userStruct.initialPayout += immediateAmount;\\n    userStruct.liquidBalance += immediateAmount;                        // issue TGE % immediately to struct\\n    userStruct.pendingForClaim += _amount - immediateAmount;            // save the rest\\n    userStruct.tokensToIssue = _amount;\\n    userStruct.numUnlocks = 0;\\n    if (!userStruct.hasBought) {\\n      icoTokenHolders.push(_to);\\n      userStruct.hasBought = true;\\n    }\\n\\n    userStruct.totalTokenBalance += _amount;\\n    availableTreasury -= _amount;\\n    userStruct.nextUnlockDate = timestampNow;\\n    userStruct.isLocked = true;\\n  }\\n\\n  // -------------------------------------------------------------------------------------------------------\\n  // ------------------------------- Admin\\n  // -------------------------------------------------------------------------------------------------------\\n\\n  // @notice                            allows admin to issue tokens with vesting rules to address\\n  // @param                             [uint256] _amount => amount of Token tokens to issue\\n  // @param                             [address] _to => address to issue tokens to\\n  function                              issueTokens(uint256 _amount, address _to) public areTokensAvailable(_amount) onlyOwner {\\n    _lockAndDistribute(_amount, _to);\\n    emit TokenPurchased(_to, _amount);\\n  }\\n\\n  // @notice                            allows to withdraw remaining tokens after the round end\\n  // @param                             [address] _reciever => wallet to send tokens to\\n  function                              withdrawRemainingToken(address _reciever) public onlyOwner ifInactive {\\n    TOKEN.mint(_reciever, availableTreasury);\\n    availableTreasury = 0;\\n  }\\n\\n  // @notice                            checks if round still active\\n  function                              checkIfActive() public returns(bool) {\\n    if (availableTreasury == 0) {\\n      isActive = false;\\n    }\\n    if (availableTreasury > 0) {\\n      isActive = true;\\n    }\\n    return(isActive);\\n  }\\n}\",\"keccak256\":\"0x3f51cff606c8fabccea79272bd477d797f44ec184495f51bf836cc9a46191a53\",\"license\":\"MIT\"},\"contracts/interfaces/ITOKEN.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n//--------------------------\\n// 5F 30 78 30 30 6C 61 62\\n//--------------------------\\n//\\n// Token contract interface\\n\\npragma solidity ^0.8.4;\\n\\ninterface IToken {\\n  function        balanceOf(address account) external view returns (uint256);\\n  function        transfer(address to, uint256 amount) external returns (bool);\\n  function        transferFrom(address from,\\n                               address to,\\n                               uint256 amount\\n                               ) external returns (bool);\\n  function        approve(address spender, uint256 amount) external returns (bool);\\n  function        allowance(address owner, address spender) external view returns (uint256);\\n  function        grantManagerToContractInit(address account, uint256 amount) external;\\n  function        revokeManagerAfterContractInit(address account) external;\\n  function        mint(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf8d56993c921eb1f86e3706ef03f86b6a06a672775e12d01a773a7d6acbe50c1\",\"license\":\"MIT\"},\"libs/@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"libs/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"libs/@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526a108b2a2c2802909400000060035534801561001f57600080fd5b50604051610eae380380610eae83398101604081905261003e91610151565b610047336100e5565b600180546001600160a01b0384166001600160a01b0319918216811790925560028054909116821790556040516366b700d760e01b81523060048201526a108b2a2c2802909400000060248201526366b700d790604401600060405180830381600087803b1580156100b857600080fd5b505af11580156100cc573d6000803e3d6000fd5b50506004805460ff191660011790555061018392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461014c57600080fd5b919050565b60008060408385031215610163578182fd5b61016c83610135565b915061017a60208401610135565b90509250929050565b610d1c806101926000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638867596f116100a2578063c23be47f11610071578063c23be47f1461028f578063c2cba306146102a2578063cb628039146102b5578063e6748c5a146102bd578063f2fde38b146102cf57600080fd5b80638867596f146101bd5780638da5cb5b146101c65780639b5856c9146101d7578063a87430ba146101e057600080fd5b80634d7b31d7116100de5780634d7b31d71461017f5780637061b08d14610188578063715018a6146101a25780637ad5be88146101aa57600080fd5b806315d331d0146101105780631820cabb1461014057806322f3e2d41461015857806348c54b9d14610175575b600080fd5b61012361011e366004610b7e565b6102e2565b6040516001600160a01b0390911681526020015b60405180910390f35b61014a62278d0081565b604051908152602001610137565b6004546101659060ff1681565b6040519015158152602001610137565b61017d61030c565b005b61014a61010e81565b610190602481565b60405160ff9091168152602001610137565b61017d610660565b61017d6101b8366004610b96565b610696565b61014a61011581565b6000546001600160a01b0316610123565b61014a60035481565b6102436101ee366004610b5d565b60056020819052600091825260409091208054600182015460028301546003840154600485015495850154600686015460079096015494969395929491939261ffff82169260ff620100009093048316921689565b60408051998a5260208a0198909852968801959095526060870193909352608086019190915261ffff1660a0850152151560c084015260e0830152151561010082015261012001610137565b61017d61029d366004610b5d565b610764565b600154610123906001600160a01b031681565b610165610861565b61014a6a108b2a2c2802909400000081565b61017d6102dd366004610b5d565b610899565b600681815481106102f257600080fd5b6000918252602090912001546001600160a01b0316905081565b336000908152600560205260409020600301546103645760405162461bcd60e51b81526020600482015260116024820152704e6f7468696e6720746f20636c61696d2160781b60448201526064015b60405180910390fd5b336000908152600560205260409020600401544210156103c65760405162461bcd60e51b815260206004820152601860248201527f546f6b656e7320617265207374696c6c206c6f636b6564210000000000000000604482015260640161035b565b3360008181526005602081905260408220908101805462ff000019169081905590919062010000900460ff16156104345760405162461bcd60e51b8152602060048201526012602482015271546f6b656e7320617265206c6f636b65642160701b604482015260640161035b565b61044060016024610cad565b600583015460ff9190911661ffff909116101561047d5761010e612710836001015461046c9190610c34565b6104769190610c54565b90506104f1565b61048960016024610cad565b600583015461ffff1660ff9190911614156104a9575060038101546104f1565b60405162461bcd60e51b815260206004820152601e60248201527f45766572797468696e6720697320616c726561647920636c61696d6564210000604482015260640161035b565b60058201805462ff00001916620100001790556002546040516340c10f1960e01b81526001600160a01b03858116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b15801561055257600080fd5b505af1158015610566573d6000803e3d6000fd5b505050508082600201600082825461057e9190610c1c565b92505081905550808260030160008282546105999190610c96565b9250508190555062278d008260040160008282546105b79190610c1c565b9091555050600582018054600191906000906105d890849061ffff16610bf6565b82546101009290920a61ffff81810219909316918316021790915560058401546001600160a01b03861692507f0886cb285f2e8c3531fc0ef6a4c365909b5f707ea98b34b5fe6d047c208687a491849161063491166024610c73565b60048601546040805193845261ffff9092166020840152908201526060015b60405180910390a2505050565b6000546001600160a01b0316331461068a5760405162461bcd60e51b815260040161035b90610bc1565b6106946000610934565b565b816000816003546106a79190610c96565b10156106f55760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f75676820746f6b656e73206c65667421000000000000000000604482015260640161035b565b6000546001600160a01b0316331461071f5760405162461bcd60e51b815260040161035b90610bc1565b6107298383610984565b816001600160a01b03167f55c18555197c6574627cf460c66073d10aa05d412468800b7b71feeaf82ea92d8460405161065391815260200190565b6000546001600160a01b0316331461078e5760405162461bcd60e51b815260040161035b90610bc1565b600354156107e4576004805460ff1916600117815560405162461bcd60e51b815261035b9101602080825260169082015275526f756e64206973207374696c6c206163746976652160501b604082015260600190565b6004805460ff191681556002546003546040516340c10f1960e01b81526001600160a01b038581169482019490945260248101919091529116906340c10f1990604401600060405180830381600087803b15801561084157600080fd5b505af1158015610855573d6000803e3d6000fd5b50506000600355505050565b600060035460001415610879576004805460ff191690555b6003541561088f576004805460ff191660011790555b5060045460ff1690565b6000546001600160a01b031633146108c35760405162461bcd60e51b815260040161035b90610bc1565b6001600160a01b0381166109285760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161035b565b61093181610934565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811660009081526005602052604081209042906101156109ae61271087610c34565b6109b89190610c54565b6002546040516340c10f1960e01b81526001600160a01b038781166004830152602482018490529293509116906340c10f1990604401600060405180830381600087803b158015610a0857600080fd5b505af1158015610a1c573d6000803e3d6000fd5b5050505080836006016000828254610a349190610c1c565b9250508190555080836002016000828254610a4f9190610c1c565b90915550610a5f90508186610c96565b836003016000828254610a729190610c1c565b90915550506001830185905560058301805461ffff19169055600783015460ff16610af35760068054600180820183556000929092527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b03871617905560078401805460ff191690911790555b84836000016000828254610b079190610c1c565b925050819055508460036000828254610b209190610c96565b9091555050506004820155600501805462ff00001916620100001790555050565b80356001600160a01b0381168114610b5857600080fd5b919050565b600060208284031215610b6e578081fd5b610b7782610b41565b9392505050565b600060208284031215610b8f578081fd5b5035919050565b60008060408385031215610ba8578081fd5b82359150610bb860208401610b41565b90509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600061ffff808316818516808303821115610c1357610c13610cd0565b01949350505050565b60008219821115610c2f57610c2f610cd0565b500190565b600082610c4f57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610c6e57610c6e610cd0565b500290565b600061ffff83811690831681811015610c8e57610c8e610cd0565b039392505050565b600082821015610ca857610ca8610cd0565b500390565b600060ff821660ff841680821015610cc757610cc7610cd0565b90039392505050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220d43c89a2d47826e97e6d0e91134e32b6b71fcd843e5a8a3064a18f12e3fa837564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80638867596f116100a2578063c23be47f11610071578063c23be47f1461028f578063c2cba306146102a2578063cb628039146102b5578063e6748c5a146102bd578063f2fde38b146102cf57600080fd5b80638867596f146101bd5780638da5cb5b146101c65780639b5856c9146101d7578063a87430ba146101e057600080fd5b80634d7b31d7116100de5780634d7b31d71461017f5780637061b08d14610188578063715018a6146101a25780637ad5be88146101aa57600080fd5b806315d331d0146101105780631820cabb1461014057806322f3e2d41461015857806348c54b9d14610175575b600080fd5b61012361011e366004610b7e565b6102e2565b6040516001600160a01b0390911681526020015b60405180910390f35b61014a62278d0081565b604051908152602001610137565b6004546101659060ff1681565b6040519015158152602001610137565b61017d61030c565b005b61014a61010e81565b610190602481565b60405160ff9091168152602001610137565b61017d610660565b61017d6101b8366004610b96565b610696565b61014a61011581565b6000546001600160a01b0316610123565b61014a60035481565b6102436101ee366004610b5d565b60056020819052600091825260409091208054600182015460028301546003840154600485015495850154600686015460079096015494969395929491939261ffff82169260ff620100009093048316921689565b60408051998a5260208a0198909852968801959095526060870193909352608086019190915261ffff1660a0850152151560c084015260e0830152151561010082015261012001610137565b61017d61029d366004610b5d565b610764565b600154610123906001600160a01b031681565b610165610861565b61014a6a108b2a2c2802909400000081565b61017d6102dd366004610b5d565b610899565b600681815481106102f257600080fd5b6000918252602090912001546001600160a01b0316905081565b336000908152600560205260409020600301546103645760405162461bcd60e51b81526020600482015260116024820152704e6f7468696e6720746f20636c61696d2160781b60448201526064015b60405180910390fd5b336000908152600560205260409020600401544210156103c65760405162461bcd60e51b815260206004820152601860248201527f546f6b656e7320617265207374696c6c206c6f636b6564210000000000000000604482015260640161035b565b3360008181526005602081905260408220908101805462ff000019169081905590919062010000900460ff16156104345760405162461bcd60e51b8152602060048201526012602482015271546f6b656e7320617265206c6f636b65642160701b604482015260640161035b565b61044060016024610cad565b600583015460ff9190911661ffff909116101561047d5761010e612710836001015461046c9190610c34565b6104769190610c54565b90506104f1565b61048960016024610cad565b600583015461ffff1660ff9190911614156104a9575060038101546104f1565b60405162461bcd60e51b815260206004820152601e60248201527f45766572797468696e6720697320616c726561647920636c61696d6564210000604482015260640161035b565b60058201805462ff00001916620100001790556002546040516340c10f1960e01b81526001600160a01b03858116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b15801561055257600080fd5b505af1158015610566573d6000803e3d6000fd5b505050508082600201600082825461057e9190610c1c565b92505081905550808260030160008282546105999190610c96565b9250508190555062278d008260040160008282546105b79190610c1c565b9091555050600582018054600191906000906105d890849061ffff16610bf6565b82546101009290920a61ffff81810219909316918316021790915560058401546001600160a01b03861692507f0886cb285f2e8c3531fc0ef6a4c365909b5f707ea98b34b5fe6d047c208687a491849161063491166024610c73565b60048601546040805193845261ffff9092166020840152908201526060015b60405180910390a2505050565b6000546001600160a01b0316331461068a5760405162461bcd60e51b815260040161035b90610bc1565b6106946000610934565b565b816000816003546106a79190610c96565b10156106f55760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f75676820746f6b656e73206c65667421000000000000000000604482015260640161035b565b6000546001600160a01b0316331461071f5760405162461bcd60e51b815260040161035b90610bc1565b6107298383610984565b816001600160a01b03167f55c18555197c6574627cf460c66073d10aa05d412468800b7b71feeaf82ea92d8460405161065391815260200190565b6000546001600160a01b0316331461078e5760405162461bcd60e51b815260040161035b90610bc1565b600354156107e4576004805460ff1916600117815560405162461bcd60e51b815261035b9101602080825260169082015275526f756e64206973207374696c6c206163746976652160501b604082015260600190565b6004805460ff191681556002546003546040516340c10f1960e01b81526001600160a01b038581169482019490945260248101919091529116906340c10f1990604401600060405180830381600087803b15801561084157600080fd5b505af1158015610855573d6000803e3d6000fd5b50506000600355505050565b600060035460001415610879576004805460ff191690555b6003541561088f576004805460ff191660011790555b5060045460ff1690565b6000546001600160a01b031633146108c35760405162461bcd60e51b815260040161035b90610bc1565b6001600160a01b0381166109285760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161035b565b61093181610934565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811660009081526005602052604081209042906101156109ae61271087610c34565b6109b89190610c54565b6002546040516340c10f1960e01b81526001600160a01b038781166004830152602482018490529293509116906340c10f1990604401600060405180830381600087803b158015610a0857600080fd5b505af1158015610a1c573d6000803e3d6000fd5b5050505080836006016000828254610a349190610c1c565b9250508190555080836002016000828254610a4f9190610c1c565b90915550610a5f90508186610c96565b836003016000828254610a729190610c1c565b90915550506001830185905560058301805461ffff19169055600783015460ff16610af35760068054600180820183556000929092527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b03871617905560078401805460ff191690911790555b84836000016000828254610b079190610c1c565b925050819055508460036000828254610b209190610c96565b9091555050506004820155600501805462ff00001916620100001790555050565b80356001600160a01b0381168114610b5857600080fd5b919050565b600060208284031215610b6e578081fd5b610b7782610b41565b9392505050565b600060208284031215610b8f578081fd5b5035919050565b60008060408385031215610ba8578081fd5b82359150610bb860208401610b41565b90509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600061ffff808316818516808303821115610c1357610c13610cd0565b01949350505050565b60008219821115610c2f57610c2f610cd0565b500190565b600082610c4f57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610c6e57610c6e610cd0565b500290565b600061ffff83811690831681811015610c8e57610c8e610cd0565b039392505050565b600082821015610ca857610ca8610cd0565b500390565b600060ff821660ff841680821015610cc757610cc7610cd0565b90039392505050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220d43c89a2d47826e97e6d0e91134e32b6b71fcd843e5a8a3064a18f12e3fa837564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2182,
        "contract": "contracts/Vesting.sol:RoundVesting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1247,
        "contract": "contracts/Vesting.sol:RoundVesting",
        "label": "TokenAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1250,
        "contract": "contracts/Vesting.sol:RoundVesting",
        "label": "TOKEN",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IToken)1781"
      },
      {
        "astId": 1253,
        "contract": "contracts/Vesting.sol:RoundVesting",
        "label": "availableTreasury",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1255,
        "contract": "contracts/Vesting.sol:RoundVesting",
        "label": "isActive",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 1279,
        "contract": "contracts/Vesting.sol:RoundVesting",
        "label": "users",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(User)1274_storage)"
      },
      {
        "astId": 1282,
        "contract": "contracts/Vesting.sol:RoundVesting",
        "label": "icoTokenHolders",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IToken)1781": {
        "encoding": "inplace",
        "label": "contract IToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(User)1274_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RoundVesting.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)1274_storage"
      },
      "t_struct(User)1274_storage": {
        "encoding": "inplace",
        "label": "struct RoundVesting.User",
        "members": [
          {
            "astId": 1257,
            "contract": "contracts/Vesting.sol:RoundVesting",
            "label": "totalTokenBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1259,
            "contract": "contracts/Vesting.sol:RoundVesting",
            "label": "tokensToIssue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1261,
            "contract": "contracts/Vesting.sol:RoundVesting",
            "label": "liquidBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1263,
            "contract": "contracts/Vesting.sol:RoundVesting",
            "label": "pendingForClaim",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1265,
            "contract": "contracts/Vesting.sol:RoundVesting",
            "label": "nextUnlockDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1267,
            "contract": "contracts/Vesting.sol:RoundVesting",
            "label": "numUnlocks",
            "offset": 0,
            "slot": "5",
            "type": "t_uint16"
          },
          {
            "astId": 1269,
            "contract": "contracts/Vesting.sol:RoundVesting",
            "label": "isLocked",
            "offset": 2,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 1271,
            "contract": "contracts/Vesting.sol:RoundVesting",
            "label": "initialPayout",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1273,
            "contract": "contracts/Vesting.sol:RoundVesting",
            "label": "hasBought",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}