{
  "address": "0x6a8321cAeE1e1409f2DA0CB87c513f2DD773573b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usdt",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimsLeft",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextUnlockDate",
          "type": "uint256"
        }
      ],
      "name": "TokenClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenPurchased",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLAIM_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLIFF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCK_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_PURCHASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUM_CLAIMS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUND_END_DATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUND_FUND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUND_START_DATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_PRICE_USDT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableTreasury",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buyTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkIfActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "icoTokenHolders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "issueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdtAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalTokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokensToIssue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingForClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextUnlockDate",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "numUnlocks",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "isLocked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "initialPayout",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasBought",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reciever",
          "type": "address"
        }
      ],
      "name": "withdrawRaisedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reciever",
          "type": "address"
        }
      ],
      "name": "withdrawRemainingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4d0d1f42f7d92b9c5d8ccb4fbfb2a3e55c506a62b6a3841304b2b4d2035e93ed",
  "receipt": {
    "to": null,
    "from": "0x1102C9298F300d6cA6faf5E50eDaD0e53E6E0Ad5",
    "contractAddress": "0x6a8321cAeE1e1409f2DA0CB87c513f2DD773573b",
    "transactionIndex": 1,
    "gasUsed": "1422932",
    "logsBloom": "0x
    "blockHash": "0xf6d3ecd31a92a40b93a990ed2e146215d590940e1e6ea5d926cd555e9f55f096",
    "transactionHash": "0x4d0d1f42f7d92b9c5d8ccb4fbfb2a3e55c506a62b6a3841304b2b4d2035e93ed",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 23271380,
        "transactionHash": "0x4d0d1f42f7d92b9c5d8ccb4fbfb2a3e55c506a62b6a3841304b2b4d2035e93ed",
        "address": "0x6a8321cAeE1e1409f2DA0CB87c513f2DD773573b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001102c9298f300d6ca6faf5e50edad0e53e6e0ad5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf6d3ecd31a92a40b93a990ed2e146215d590940e1e6ea5d926cd555e9f55f096"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 23271380,
        "transactionHash": "0x4d0d1f42f7d92b9c5d8ccb4fbfb2a3e55c506a62b6a3841304b2b4d2035e93ed",
        "address": "0xCf3Bb6AC0f6D987a5727e2d15e39c2D6061D5beC",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000cf3bb6ac0f6d987a5727e2d15e39c2d6061d5bec",
          "0x0000000000000000000000006a8321caee1e1409f2da0cb87c513f2dd773573b"
        ],
        "data": "0x00000000000000000000000000000000000000000031a17e847807b1bc000000",
        "logIndex": 1,
        "blockHash": "0xf6d3ecd31a92a40b93a990ed2e146215d590940e1e6ea5d926cd555e9f55f096"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 23271380,
        "transactionHash": "0x4d0d1f42f7d92b9c5d8ccb4fbfb2a3e55c506a62b6a3841304b2b4d2035e93ed",
        "address": "0xCf3Bb6AC0f6D987a5727e2d15e39c2D6061D5beC",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9",
          "0x0000000000000000000000006a8321caee1e1409f2da0cb87c513f2dd773573b",
          "0x0000000000000000000000006a8321caee1e1409f2da0cb87c513f2dd773573b"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xf6d3ecd31a92a40b93a990ed2e146215d590940e1e6ea5d926cd555e9f55f096"
      }
    ],
    "blockNumber": 23271380,
    "cumulativeGasUsed": "1443932",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf3Bb6AC0f6D987a5727e2d15e39c2D6061D5beC",
    "0x55d398326f99059fF775485246999027B3197955"
  ],
  "solcInputHash": "8d8290d49d586797314f75693e9d50fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimsLeft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextUnlockDate\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLIFF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PURCHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_CLAIMS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_END_DATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_FUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_START_DATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_PRICE_USDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkIfActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"icoTokenHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"issueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToIssue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingForClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextUnlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"numUnlocks\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"initialPayout\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasBought\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reciever\",\"type\":\"address\"}],\"name\":\"withdrawRaisedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reciever\",\"type\":\"address\"}],\"name\":\"withdrawRemainingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Round.sol\":\"Round\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Round.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n//\\r\\n//--------------------------\\r\\n// 44 65 66 69 4d 6f 6f 6e\\r\\n//--------------------------\\r\\n//\\r\\n//\\r\\n// UI:\\r\\n//\\r\\n// - Is round active ==========================================> [bool]    isActive\\r\\n// - Round end date ===========================================> [uint256] ROUND_END_DATE\\r\\n// - Tokens left ==============================================> [uint256] availableTreasury\\r\\n// - Return user liquid balance ===============================> [uint256] users[msg.sender].liquidBalance\\r\\n// - Pending for claim for user ===============================> [uint256] users[msg.sender].pendingForClaim\\r\\n// - Next unlock date for user ================================> [uint256] users[msg.sender].nextUnlockDate\\r\\n// - Check allowance ==========================================> [uint256] USDT.allowance(msg.sender, address(this))\\r\\n// - Buy tokens (recieve in USDT, input amount in Token) =======>           buyToken(uint256 _amount)\\r\\n// - Check if user tokens unlocked and transfer them to user ==>           claimTokens()\\r\\n// - Set allowance ============================================> call USDT contract from website directly\\r\\n//                                                       approve amount = 200000000000000000000000000 wei\\r\\n//                                                       this is WEI too much (\\ud83e\\udd21) but we'll never spend\\r\\n//                                                       more than 50k, this allows us to track\\r\\n//                                                       Token purchase amount limits\\r\\n//\\r\\n// DEPLOYMENT:\\r\\n//\\r\\n// - Deploy Token token\\r\\n// - Deploy SeedRound, pass Token && USDT token addresses to constructor\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../libs/@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../libs/@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/ITOKEN.sol\\\";\\r\\n\\r\\ncontract Round is Ownable {\\r\\n\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n  // ------------------------------- ROUND PARAMETERS\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n\\r\\n\\r\\n  // @notice                            round conditions\\r\\n  uint256 constant public               ROUND_FUND = 60_000_000 ether;\\r\\n  uint256 constant public               TOKEN_PRICE_USDT = 100;                // price / 10,000 = 0.0075 usdt\\r\\n  uint256 constant public               MIN_PURCHASE = 1000 ether;            // 10 usdt\\r\\n  uint256 constant public               ROUND_START_DATE = \\t1669075200;        // 22.11.22 00:00\\r\\n  uint256 constant public               ROUND_END_DATE = \\t1672444800;          // 31.12.22 00:00\\r\\n  uint256 constant public               LOCK_PERIOD = 30 days;\\r\\n  uint256 constant public               TGE = 5;                              // 5% TGE\\r\\n  uint256 constant public               CLIFF = 62 days;                      // 2 month cliff (time before first unlock)\\r\\n  uint256 constant public               CLAIM_PERCENT = 790;                  // 7.9%\\r\\n  uint8 constant public                 NUM_CLAIMS = 12;                      // 12 claims to be performed in total      \\r\\n\\r\\n\\r\\n  // @notice                            token interfaces\\r\\n  address public                        TokenAddress;\\r\\n  address public                        usdtAddress;\\r\\n  IToken                                TOKEN;\\r\\n  IERC20                                USDT;\\r\\n\\r\\n  // @notice                            round state\\r\\n  uint256 public                        availableTreasury = ROUND_FUND;\\r\\n  bool    public                        isActive;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n  // ------------------------------- USER MANAGMENT\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n\\r\\n  // @notice                            user state structure\\r\\n  struct                                User {\\r\\n    uint256                             totalTokenBalance;  // total num of tokens user have bought through the contract\\r\\n    uint256                             tokensToIssue;      // num of tokens user have bought in current vesting period (non complete unlock cycle)\\r\\n    uint256                             liquidBalance;      // amount of tokens the contract already sent to user\\r\\n    uint256                             pendingForClaim;    // amount of user's tokens that are still locked\\r\\n    uint256                             nextUnlockDate;     // unix timestamp of next claim unlock (defined by LOCK_PERIOD)\\r\\n    uint16                              numUnlocks;         // months total\\r\\n    bool                                isLocked;           // are tokens currently locked\\r\\n    uint256                             initialPayout;      // takes into account TGE % for multiple purchases\\r\\n    bool                                hasBought;          // used in token purchase mechanics\\r\\n  }\\r\\n\\r\\n  // @notice                            keeps track of users\\r\\n  mapping(address => User) public       users;\\r\\n  address[] public                      icoTokenHolders;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n  // ------------------------------- EVENTS\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n\\r\\n  event                                 TokenPurchased(address indexed user, uint256 amount);\\r\\n  event                                 TokenClaimed(address indexed user,\\r\\n                                                    uint256 amount,\\r\\n                                                    uint256 claimsLeft,\\r\\n                                                    uint256 nextUnlockDate);\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  // FUNCTIONS\\r\\n  //\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n  // ------------------------------- Constructor\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n\\r\\n  // @param                             [address] token => token address\\r\\n  // @param                             [address] usdt => USDT token address\\r\\n  constructor(address token, address usdt) {\\r\\n    TokenAddress = token;\\r\\n    usdtAddress = usdt;\\r\\n    TOKEN = IToken(token);\\r\\n    USDT = IERC20(usdt);\\r\\n    TOKEN.grantManagerToContractInit(address(this), ROUND_FUND);\\r\\n    isActive = true;\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n  // ------------------------------- Modifiers\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n\\r\\n  // @notice                            checks if tokens could be sold\\r\\n  // @param                             [uint256] amount => amount of tokens to sell\\r\\n  modifier                              areTokensAvailable(uint256 amount) {\\r\\n    require(amount >= MIN_PURCHASE,\\r\\n                      \\\"Lower than min purchase amount!\\\");\\r\\n    require(availableTreasury - amount >= 0,\\r\\n                      \\\"Not enough tokens left!\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // @notice                            checks whether user's tokens are locked\\r\\n  modifier                              checkLock() {\\r\\n    require(users[msg.sender].pendingForClaim > 0,\\r\\n                                      \\\"Nothing to claim!\\\");\\r\\n    require(block.timestamp >= users[msg.sender].nextUnlockDate,\\r\\n                                      \\\"Tokens are still locked!\\\");\\r\\n    users[msg.sender].isLocked = false;\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // @notice                            checks if round is active\\r\\n  modifier                              ifActive() {\\r\\n    if ((block.timestamp < ROUND_START_DATE) || (block.timestamp > ROUND_END_DATE) || availableTreasury == 0) {\\r\\n      isActive = false;\\r\\n      revert(\\\"Round is not active!\\\");\\r\\n    }\\r\\n    isActive = true;\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // @notice                            checks if round is inactive\\r\\n  modifier                              ifInactive() {\\r\\n    if (block.timestamp <= ROUND_END_DATE && availableTreasury > 0) {\\r\\n      isActive = true;\\r\\n      revert(\\\"Round is still active!\\\");\\r\\n    }\\r\\n    isActive = false;\\r\\n    _;\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n  // ------------------------------- ICO logic\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n\\r\\n  // @notice                            checks if tokens are unlocked and transfers set % from pendingForClaim\\r\\n  //                                    user will recieve all remaining tokens with the last claim\\r\\n  function                              claimTokens() public checkLock() {\\r\\n    address                             user = msg.sender;\\r\\n    User  storage                       userStruct = users[user];\\r\\n    uint256                             amountToClaim;\\r\\n\\r\\n    require(userStruct.isLocked == false, \\\"Tokens are locked!\\\");\\r\\n    if (userStruct.numUnlocks < NUM_CLAIMS - 1) {\\r\\n      amountToClaim = (userStruct.tokensToIssue / 10_000) * CLAIM_PERCENT;\\r\\n    }\\r\\n    else if (userStruct.numUnlocks == NUM_CLAIMS - 1) {\\r\\n      amountToClaim = userStruct.pendingForClaim;\\r\\n    }\\r\\n    else {\\r\\n      revert(\\\"Everything is already claimed!\\\");\\r\\n    }\\r\\n    userStruct.isLocked = true;\\r\\n    TOKEN.mint(user, amountToClaim);\\r\\n    userStruct.liquidBalance += amountToClaim;\\r\\n    userStruct.pendingForClaim -= amountToClaim;\\r\\n    userStruct.nextUnlockDate += LOCK_PERIOD;\\r\\n    userStruct.numUnlocks += 1;\\r\\n\\r\\n    emit TokenClaimed(user,\\r\\n                     amountToClaim,\\r\\n                     NUM_CLAIMS - userStruct.numUnlocks, // number of claims left to perform\\r\\n                     userStruct.nextUnlockDate);\\r\\n  }\\r\\n\\r\\n  // @notice                            allows to purchase tokens\\r\\n  // @param                             [uint256] _amount => amount of tokens to purchase\\r\\n  function                              buyTokens(uint256 _amount) public areTokensAvailable(_amount) ifActive {\\r\\n    address                             user = msg.sender;\\r\\n    uint256                             priceUSDT = _amount / 10000 * TOKEN_PRICE_USDT;\\r\\n\\r\\n    require(USDT.allowance(msg.sender, address(this)) >= _amount,\\r\\n                      \\\"Not enough allowance, approve your USDT first!\\\");\\r\\n    require(USDT.balanceOf(user) >= priceUSDT, \\\"Not enough USDT tokens!\\\");\\r\\n    require(USDT.transferFrom(user, address(this), priceUSDT) == true, \\\"Failed to transfer USDT!\\\");\\r\\n    _lockAndDistribute(_amount, msg.sender);\\r\\n    emit TokenPurchased(msg.sender, _amount);\\r\\n  }\\r\\n\\r\\n  // @notice                            when user buys Token, TGE % is issued immediately\\r\\n  //                                    remaining tokens are locked for 12 * LOCK_PERIOD = 12 months + 2 months cliff\\r\\n  // @param                             [uint256] amount => amount of Token tokens to distribute\\r\\n  // @param                             [address] _to => address to issue tokens to\\r\\n  function                              _lockAndDistribute(uint256 _amount, address _to) private {\\r\\n    User  storage                       userStruct = users[_to];\\r\\n    uint256                             timestampNow = block.timestamp;\\r\\n\\r\\n    uint256 immediateAmount = (_amount / 100) * TGE;\\r\\n    TOKEN.mint(_to, immediateAmount);                                   // issue TGE % immediately\\r\\n    userStruct.initialPayout += immediateAmount;\\r\\n    userStruct.liquidBalance += immediateAmount;                        // issue TGE % immediately to struct\\r\\n    userStruct.pendingForClaim += _amount - immediateAmount;            // save the rest\\r\\n    userStruct.tokensToIssue = _amount;\\r\\n    userStruct.numUnlocks = 0;\\r\\n    if (!userStruct.hasBought) {\\r\\n      icoTokenHolders.push(_to);\\r\\n      userStruct.hasBought = true;\\r\\n    }\\r\\n\\r\\n    userStruct.totalTokenBalance += _amount;\\r\\n    availableTreasury -= _amount;\\r\\n    userStruct.nextUnlockDate = timestampNow + CLIFF;                 // lock tokens in cliff\\r\\n    userStruct.isLocked = true;\\r\\n  }\\r\\n\\r\\n  // @notice                            allows admin to issue tokens with vesting rules to address\\r\\n  // @param                             [uint256] _amount => amount of Token tokens to issue\\r\\n  // @param                             [address] _to => address to issue tokens to\\r\\n  function                              issueTokens(uint256 _amount, address _to) public areTokensAvailable(_amount) onlyOwner {\\r\\n    _lockAndDistribute(_amount, _to);\\r\\n    emit TokenPurchased(_to, _amount);\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n  // ------------------------------- Admin\\r\\n  // -------------------------------------------------------------------------------------------------------\\r\\n\\r\\n  // @notice                            allows to withdraw raised funds (USDT)\\r\\n  // @param                             [address] _reciever => wallet to send tokens to\\r\\n  function                              withdrawRaisedFunds(address _reciever) public onlyOwner {\\r\\n    uint256                             balance = USDT.balanceOf(address(this));\\r\\n\\r\\n    USDT.transfer(_reciever, balance);\\r\\n  }\\r\\n\\r\\n  // @notice                            allows to withdraw remaining tokens after the round end\\r\\n  // @param                             [address] _reciever => wallet to send tokens to\\r\\n  function                              withdrawRemainingToken(address _reciever) public onlyOwner ifInactive {\\r\\n    TOKEN.mint(_reciever, availableTreasury);\\r\\n    availableTreasury = 0;\\r\\n  }\\r\\n\\r\\n  // @notice                            checks if round still active\\r\\n  function                              checkIfActive() public returns(bool) {\\r\\n    if ((block.timestamp <= ROUND_START_DATE) || (block.timestamp >= ROUND_END_DATE) || availableTreasury == 0) {\\r\\n      isActive = false;\\r\\n    }\\r\\n    if (block.timestamp > ROUND_START_DATE && block.timestamp < ROUND_END_DATE && availableTreasury > 0) {\\r\\n      isActive = true;\\r\\n    }\\r\\n    return(isActive);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x2312bd825e9a103783ce0fafc05de13dd0b40f5e958a838b94593d3a7cbe251b\",\"license\":\"MIT\"},\"contracts/interfaces/ITOKEN.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n//\\r\\n//--------------------------\\r\\n// 5F 30 78 30 30 6C 61 62\\r\\n//--------------------------\\r\\n//\\r\\n// Token contract interface\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IToken {\\r\\n  function        balanceOf(address account) external view returns (uint256);\\r\\n  function        transfer(address to, uint256 amount) external returns (bool);\\r\\n  function        transferFrom(address from,\\r\\n                               address to,\\r\\n                               uint256 amount\\r\\n                               ) external returns (bool);\\r\\n  function        approve(address spender, uint256 amount) external returns (bool);\\r\\n  function        allowance(address owner, address spender) external view returns (uint256);\\r\\n  function        grantManagerToContractInit(address account, uint256 amount) external;\\r\\n  function        revokeManagerAfterContractInit(address account) external;\\r\\n  function        mint(address to, uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x5494844e99d51e7796236d109eb5714c8b865a2152c810c406faaab39f6c98be\",\"license\":\"MIT\"},\"libs/@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd2bd30ee25ef65894d0a4f974eb71cc59907d62ab26fe1d2e96e5b4572178d8f\",\"license\":\"MIT\"},\"libs/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xdd286f7283325eb12ee50e41dac6be9665262e827b66f4f8952111ff77b6a130\",\"license\":\"MIT\"},\"libs/@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x81d5fc973a522c8909d60be6a201869d46aa47b030b8813f60616404628c2b94\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80638da5cb5b116100de578063c23be47f11610097578063d439390c11610071578063d439390c1461037e578063e6748c5a1461038e578063f2fde38b146103a0578063f8736672146103b357600080fd5b8063c23be47f14610350578063c2cba30614610363578063cb6280391461037657600080fd5b80638da5cb5b1461025e5780639ab4a4451461026f5780639b5856c914610282578063a5bf1cab1461028b578063a87430ba14610296578063b87592f21461034657600080fd5b80634d7b31d7116101305780634d7b31d7146102055780637061b08d1461020e578063715018a6146102285780637805df24146102305780637ad5be88146102435780638867596f1461025657600080fd5b806304cd7ba61461017857806315d331d0146101965780631820cabb146101c157806322f3e2d4146101cb5780633610724e146101e857806348c54b9d146101fd575b600080fd5b61018363637c110081565b6040519081526020015b60405180910390f35b6101a96101a4366004611286565b6103bb565b6040516001600160a01b03909116815260200161018d565b61018362278d0081565b6006546101d89060ff1681565b604051901515815260200161018d565b6101fb6101f6366004611286565b6103e5565b005b6101fb610812565b61018361031681565b610216600c81565b60405160ff909116815260200161018d565b6101fb610b60565b6101fb61023e366004611245565b610b96565b6101fb6102513660046112b6565b610cd0565b610183600581565b6000546001600160a01b03166101a9565b6002546101a9906001600160a01b031681565b61018360055481565b6101836363af7b8081565b6102fa6102a4366004611245565b6007602081905260009182526040909120805460018201546002830154600384015460048501546005860154600687015496909701549496939592949193909261ffff82169260ff620100009093048316921689565b60408051998a5260208a0198909852968801959095526060870193909352608086019190915261ffff1660a0850152151560c084015260e083015215156101008201526101200161018d565b6101836251bd0081565b6101fb61035e366004611245565b610df1565b6001546101a9906001600160a01b031681565b6101d8610eff565b610183683635c9adc5dea0000081565b6101836a31a17e847807b1bc00000081565b6101fb6103ae366004611245565b610f74565b610183606481565b600881815481106103cb57600080fd5b6000918252602090912001546001600160a01b0316905081565b80683635c9adc5dea000008110156104445760405162461bcd60e51b815260206004820152601f60248201527f4c6f776572207468616e206d696e20707572636861736520616d6f756e74210060448201526064015b60405180910390fd5b60008160055461045491906113b6565b101561049c5760405162461bcd60e51b81526020600482015260176024820152764e6f7420656e6f75676820746f6b656e73206c6566742160481b604482015260640161043b565b63637c11004210806104b157506363af7b8042115b806104bc5750600554155b1561050a576006805460ff1916905560405162461bcd60e51b8152602060048201526014602482015273526f756e64206973206e6f74206163746976652160601b604482015260640161043b565b6006805460ff19166001179055336000606461052861271086611354565b6105329190611374565b60048054604051636eb1769f60e11b8152339281019290925230602483015291925085916001600160a01b03169063dd62ed3e9060440160206040518083038186803b15801561058157600080fd5b505afa158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b9919061129e565b101561061e5760405162461bcd60e51b815260206004820152602e60248201527f4e6f7420656e6f75676820616c6c6f77616e63652c20617070726f766520796f60448201526d757220555344542066697273742160901b606482015260840161043b565b600480546040516370a0823160e01b81526001600160a01b03858116938201939093528392909116906370a082319060240160206040518083038186803b15801561066857600080fd5b505afa15801561067c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a0919061129e565b10156106ee5760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f756768205553445420746f6b656e7321000000000000000000604482015260640161043b565b600480546040516323b872dd60e01b81526001600160a01b0385811693820193909352306024820152604481018490529116906323b872dd90606401602060405180830381600087803b15801561074457600080fd5b505af1158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190611266565b15156001146107cd5760405162461bcd60e51b815260206004820152601860248201527f4661696c656420746f207472616e736665722055534454210000000000000000604482015260640161043b565b6107d7843361100f565b60405184815233907f55c18555197c6574627cf460c66073d10aa05d412468800b7b71feeaf82ea92d9060200160405180910390a250505050565b336000908152600760205260409020600301546108655760405162461bcd60e51b81526020600482015260116024820152704e6f7468696e6720746f20636c61696d2160781b604482015260640161043b565b336000908152600760205260409020600401544210156108c75760405162461bcd60e51b815260206004820152601860248201527f546f6b656e7320617265207374696c6c206c6f636b6564210000000000000000604482015260640161043b565b33600081815260076020526040812060058101805462ff000019169081905590919062010000900460ff16156109345760405162461bcd60e51b8152602060048201526012602482015271546f6b656e7320617265206c6f636b65642160701b604482015260640161043b565b6109406001600c6113cd565b600583015460ff9190911661ffff909116101561097d57610316612710836001015461096c9190611354565b6109769190611374565b90506109f1565b6109896001600c6113cd565b600583015461ffff1660ff9190911614156109a9575060038101546109f1565b60405162461bcd60e51b815260206004820152601e60248201527f45766572797468696e6720697320616c726561647920636c61696d6564210000604482015260640161043b565b60058201805462ff00001916620100001790556003546040516340c10f1960e01b81526001600160a01b03858116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b158015610a5257600080fd5b505af1158015610a66573d6000803e3d6000fd5b5050505080826002016000828254610a7e919061133c565b9250508190555080826003016000828254610a9991906113b6565b9250508190555062278d00826004016000828254610ab7919061133c565b909155505060058201805460019190600090610ad890849061ffff16611316565b82546101009290920a61ffff81810219909316918316021790915560058401546001600160a01b03861692507f0886cb285f2e8c3531fc0ef6a4c365909b5f707ea98b34b5fe6d047c208687a4918491610b349116600c611393565b60048601546040805193845261ffff9092166020840152908201526060015b60405180910390a2505050565b6000546001600160a01b03163314610b8a5760405162461bcd60e51b815260040161043b906112e1565b610b9460006111d9565b565b6000546001600160a01b03163314610bc05760405162461bcd60e51b815260040161043b906112e1565b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a082319060240160206040518083038186803b158015610c0957600080fd5b505afa158015610c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c41919061129e565b6004805460405163a9059cbb60e01b81526001600160a01b038681169382019390935260248101849052929350169063a9059cbb90604401602060405180830381600087803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccb9190611266565b505050565b81683635c9adc5dea00000811015610d2a5760405162461bcd60e51b815260206004820152601f60248201527f4c6f776572207468616e206d696e20707572636861736520616d6f756e742100604482015260640161043b565b600081600554610d3a91906113b6565b1015610d825760405162461bcd60e51b81526020600482015260176024820152764e6f7420656e6f75676820746f6b656e73206c6566742160481b604482015260640161043b565b6000546001600160a01b03163314610dac5760405162461bcd60e51b815260040161043b906112e1565b610db6838361100f565b816001600160a01b03167f55c18555197c6574627cf460c66073d10aa05d412468800b7b71feeaf82ea92d84604051610b5391815260200190565b6000546001600160a01b03163314610e1b5760405162461bcd60e51b815260040161043b906112e1565b6363af7b804211158015610e3157506000600554115b15610e84576006805460ff1916600117905560405162461bcd60e51b8152602060048201526016602482015275526f756e64206973207374696c6c206163746976652160501b604482015260640161043b565b6006805460ff191690556003546005546040516340c10f1960e01b81526001600160a01b03848116600483015260248201929092529116906340c10f1990604401600060405180830381600087803b158015610edf57600080fd5b505af1158015610ef3573d6000803e3d6000fd5b50506000600555505050565b600063637c110042111580610f1857506363af7b804210155b80610f235750600554155b15610f33576006805460ff191690555b63637c110042118015610f4957506363af7b8042105b8015610f5757506000600554115b15610f6a576006805460ff191660011790555b5060065460ff1690565b6000546001600160a01b03163314610f9e5760405162461bcd60e51b815260040161043b906112e1565b6001600160a01b0381166110035760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161043b565b61100c816111d9565b50565b6001600160a01b03811660009081526007602052604081209042906005611037606487611354565b6110419190611374565b6003546040516340c10f1960e01b81526001600160a01b038781166004830152602482018490529293509116906340c10f1990604401600060405180830381600087803b15801561109157600080fd5b505af11580156110a5573d6000803e3d6000fd5b50505050808360060160008282546110bd919061133c565b92505081905550808360020160008282546110d8919061133c565b909155506110e8905081866113b6565b8360030160008282546110fb919061133c565b90915550506001830185905560058301805461ffff19169055600783015460ff1661117c5760088054600180820183556000929092527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b03871617905560078401805460ff191690911790555b84836000016000828254611190919061133c565b9250508190555084600560008282546111a991906113b6565b909155506111bc90506251bd008361133c565b60048401555050600501805462ff00001916620100001790555050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461124057600080fd5b919050565b600060208284031215611256578081fd5b61125f82611229565b9392505050565b600060208284031215611277578081fd5b8151801515811461125f578182fd5b600060208284031215611297578081fd5b5035919050565b6000602082840312156112af578081fd5b5051919050565b600080604083850312156112c8578081fd5b823591506112d860208401611229565b90509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600061ffff808316818516808303821115611333576113336113f0565b01949350505050565b6000821982111561134f5761134f6113f0565b500190565b60008261136f57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561138e5761138e6113f0565b500290565b600061ffff838116908316818110156113ae576113ae6113f0565b039392505050565b6000828210156113c8576113c86113f0565b500390565b600060ff821660ff8416808210156113e7576113e76113f0565b90039392505050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212205288ebc4fa09bcaad6f53f9fdd7433041cc3d1bb9cff57ab3f89772e4acb453b64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1470,
        "contract": "contracts/Round.sol:Round",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 82,
        "contract": "contracts/Round.sol:Round",
        "label": "TokenAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 84,
        "contract": "contracts/Round.sol:Round",
        "label": "usdtAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 87,
        "contract": "contracts/Round.sol:Round",
        "label": "TOKEN",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IToken)1069"
      },
      {
        "astId": 90,
        "contract": "contracts/Round.sol:Round",
        "label": "USDT",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)2231"
      },
      {
        "astId": 93,
        "contract": "contracts/Round.sol:Round",
        "label": "availableTreasury",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 95,
        "contract": "contracts/Round.sol:Round",
        "label": "isActive",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 119,
        "contract": "contracts/Round.sol:Round",
        "label": "users",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(User)114_storage)"
      },
      {
        "astId": 122,
        "contract": "contracts/Round.sol:Round",
        "label": "icoTokenHolders",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2231": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IToken)1069": {
        "encoding": "inplace",
        "label": "contract IToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(User)114_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Round.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)114_storage"
      },
      "t_struct(User)114_storage": {
        "encoding": "inplace",
        "label": "struct Round.User",
        "members": [
          {
            "astId": 97,
            "contract": "contracts/Round.sol:Round",
            "label": "totalTokenBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 99,
            "contract": "contracts/Round.sol:Round",
            "label": "tokensToIssue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 101,
            "contract": "contracts/Round.sol:Round",
            "label": "liquidBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 103,
            "contract": "contracts/Round.sol:Round",
            "label": "pendingForClaim",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 105,
            "contract": "contracts/Round.sol:Round",
            "label": "nextUnlockDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 107,
            "contract": "contracts/Round.sol:Round",
            "label": "numUnlocks",
            "offset": 0,
            "slot": "5",
            "type": "t_uint16"
          },
          {
            "astId": 109,
            "contract": "contracts/Round.sol:Round",
            "label": "isLocked",
            "offset": 2,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 111,
            "contract": "contracts/Round.sol:Round",
            "label": "initialPayout",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 113,
            "contract": "contracts/Round.sol:Round",
            "label": "hasBought",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}